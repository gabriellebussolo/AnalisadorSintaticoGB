import java_cup.runtime.*;
import java.util.*;
import java.io.*;

/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    public boolean syntaxErrors;

    public void syntax_error(Symbol current_token) {
        report_error(
            "Syntax error at line " + (current_token.left+1) + ", column "
            + current_token.right, null
        );
    }
:};

// Declara as variaveis terminais

terminal CLASSE;   															// Classe
terminal BOOL, INT, VOID;   												// Tipos
terminal IF, ELSE;        						  						    // Operadores condicionais
terminal CONSTANTE, ID, NUMERO;                                             // Constante, identificador e numero
terminal RETORNO;                                                           // Retorno
terminal NOT, AND, OR;						                                // Operadores logicos
terminal SOMA, MULTIPLICACAO;				                                // Operadores aritmeticos
terminal OPIGUAL, OPMAIOR, OPMENOR;			                                // Operadores relacionais
terminal IGUAL, PARESQ, PARDIR, CHAVEESQ, CHAVEDIR, PONTOEVIRGULA, VIRGULA; // Pontuacao

// Declara as variaveis nao terminais
non terminal declaracaoClasse, declaracaoAtributo, declaracaoMetodo, metodos, atributos;
non terminal argumentos, tipoAtributo, tipoMetodo, comandos, comando;
non terminal expressao, termo;
non terminal operadorLogico, operadorAritmetico, operadorRelacional;


// Define a precendencia
precedence left SOMA, MULTIPLICACAO;
precedence left BOOL, INT;
precedence nonassoc OPIGUAL, OPMAIOR, OPMENOR, NOT, AND, OR;
precedence left ELSE;

//Define a gramatica

declaracaoClasse ::= CHAVEESQ CLASSE ID atributos metodos CHAVEDIR;

atributos ::= declaracaoAtributo atributos | declaracaoAtributo;

declaracaoAtributo ::= tipoAtributo ID PONTOEVIRGULA;

argumentos ::= tipoAtributo ID VIRGULA argumentos
             | tipoAtributo ID;

tipoAtributo ::= BOOL | INT;
tipoMetodo ::= BOOL | INT | VOID;

metodos ::= declaracaoMetodo metodos
			| declaracaoMetodo;

declaracaoMetodo ::= tipoMetodo ID PARESQ argumentos PARDIR CHAVEESQ comandos CHAVEDIR;

comandos ::= comando PONTOEVIRGULA comandos
           | comando PONTOEVIRGULA;

comando ::= ID IGUAL expressao
          | IF PARESQ expressao PARDIR comandos
          | IF PARESQ expressao PARDIR comandos ELSE comandos
          | RETORNO expressao;

operadorLogico ::= NOT | AND | OR;
operadorAritmetico ::= SOMA | MULTIPLICACAO;
operadorRelacional ::= OPIGUAL | OPMAIOR | OPMENOR;

expressao ::= termo
           | expressao operadorAritmetico termo
           | expressao operadorRelacional termo
           | expressao operadorLogico expressao;

termo ::= NUMERO
        | CONSTANTE
        | ID
        | PARESQ expressao PARDIR;