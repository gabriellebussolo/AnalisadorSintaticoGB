
import java_cup.runtime.*;
import java.util.*;
import java.io.*;

parser code {:
    public boolean syntaxErrors;

    public void syntax_error(Symbol current_token) {
        report_error(
            "Syntax error at line " + (current_token.left+1) + ", column "
            + current_token.right, null
        );
    }
    
    // Variável global para o contador de temporários
    private int tempCount = 0;

    // Método para incrementar e gerar um novo temporário
    private String newTemp() {
        return "t" + (tempCount++);
    }

    List<TACNode> TACList = new ArrayList<>(); // Lista para armazenar TACs
:};

// Declara as variaveis terminais
terminal CLASSE;                                // Classe
terminal BOOL, INT, VOID;                           // Tipos
terminal IF, ELSE;                                      // Operadores condicionais
terminal CONSTANTE, ID, NUMERO;                                             // Constante, identificador e numero
terminal RETORNO;                                                           // Retorno
terminal NOT, AND, OR;                                            // Operadores logicos
terminal SOMA, MULTIPLICACAO;                                       // Operadores aritmeticos
terminal OPIGUAL, OPMAIOR, OPMENOR;                                     // Operadores relacionais
terminal IGUAL, PARESQ, PARDIR, CHAVEESQ, CHAVEDIR, PONTOEVIRGULA, VIRGULA; // Pontuacao
terminal WHILE;                                                             //comando de repeticao while

// Declara as variaveis nao terminais
non terminal declaracaoClasse, declaracaoAtributo, declaracaoMetodo, metodos, atributos;
non terminal argumentos, tipoAtributo, tipoMetodo, comandos, comando, ifSemElse;
non terminal TACNode expressaoAritmetica, expressaoBooleana, comandoAritmetico;
non terminal TACNode termoAritmetico, termoBooleano, termo;

// Define a precendencia
precedence left OR, AND, NOT;
precedence nonassoc OPIGUAL, OPMAIOR, OPMENOR;
precedence left SOMA, MULTIPLICACAO;
precedence left BOOL, INT;
precedence left ELSE, IF, ID, RETORNO, WHILE;

//Define a gramatica

declaracaoClasse ::= CHAVEESQ CLASSE ID atributos metodos CHAVEDIR;

atributos ::= declaracaoAtributo atributos | declaracaoAtributo;

declaracaoAtributo ::= tipoAtributo ID PONTOEVIRGULA;

argumentos ::= tipoAtributo ID VIRGULA argumentos
             | tipoAtributo ID;

tipoAtributo ::= BOOL | INT;
tipoMetodo ::= BOOL | INT | VOID;

metodos ::= declaracaoMetodo metodos
      | declaracaoMetodo;

declaracaoMetodo ::= tipoMetodo ID PARESQ argumentos PARDIR CHAVEESQ comandos CHAVEDIR;

comandos ::= comandos comando
           | comando;

ifSemElse ::= IF PARESQ termo PARDIR comandos | ifSemElse ELSE comandos;

comando ::= comandoAritmetico
          | RETORNO termo PONTOEVIRGULA
          | WHILE PARESQ expressaoBooleana PARDIR comandos PONTOEVIRGULA
          | ifSemElse;

comandoAritmetico ::= ID:id IGUAL termo:termo PONTOEVIRGULA
{:
    String temp = "t" + tempCount++;

    RESULT = new TACNode(null, id.toString(), termo.result, temp);
    TACList.add(RESULT);
:};

termo ::= ID:id 
{:
    String temp = "t" + tempCount++;
    RESULT = new TACNode(null, id.toString() , null, temp);
    TACList.add(RESULT);
:};

termo ::= expressaoAritmetica:expr
{:
    String temp = "t" + tempCount++;
    RESULT = new TACNode(null, expr.result, null, temp);
    TACList.add(RESULT);
:};

termo ::= expressaoBooleana:expr
{:
    String temp = "t" + tempCount++;
    RESULT = new TACNode(null, expr.result, null, temp);
    TACList.add(RESULT);
:};

expressaoAritmetica ::= termoAritmetico:termoA
{:
    String temp = "t" + tempCount++;
    RESULT = new TACNode(null, termoA.result, null, temp);
    TACList.add(RESULT);
:};

expressaoAritmetica ::= termo:t1 SOMA termo:t2
{:
    String temp = "t" + tempCount++;

    RESULT = new TACNode("+", t1.result, t2.result, temp);
    TACList.add(RESULT);
:};

expressaoAritmetica ::= termo:t1 MULTIPLICACAO termo:t2
{:
    String temp = "t" + tempCount++;

    RESULT = new TACNode("+", t1.result, t2.result, temp);
    TACList.add(RESULT);
:};

expressaoBooleana ::= termoBooleano:termoB
{:
    String temp = "t" + tempCount++;
    RESULT = new TACNode(null, termoB.result, null, temp);
    TACList.add(RESULT);
:};

expressaoBooleana ::= termo:t1 OPMAIOR termo:t2
{:
    String temp = "t" + tempCount++;
    RESULT = new TACNode(">", t1.result, t2.result, temp);
    TACList.add(RESULT);
:};

expressaoBooleana ::= termo:t1 OPMENOR termo:t2
{:
    String temp = "t" + tempCount++;
    RESULT = new TACNode("<", t1.result, t2.result, temp);
    TACList.add(RESULT);
:};

expressaoBooleana ::= termo:t1 OPIGUAL termo:t2
{:
    String temp = "t" + tempCount++;
    RESULT = new TACNode("==", t1.result, t2.result, temp);
    TACList.add(RESULT);
:};

expressaoBooleana ::= NOT termo:t1
{:
    String temp = "t" + tempCount++;
    RESULT = new TACNode("NOT", t1.result, null, temp);
    TACList.add(RESULT);
:};

expressaoBooleana ::= termo:t1 AND termo:t2
{:
    String temp = "t" + tempCount++;
    RESULT = new TACNode("AND", t1.result, t2.result, temp);
    TACList.add(RESULT);
:};

expressaoBooleana ::= termo:t1 OR termo:t2
{:
    String temp = "t" + tempCount++;
    RESULT = new TACNode("OR", t1.result, t2.result, temp);
    TACList.add(RESULT);
:};

termoAritmetico ::= NUMERO:num
{:
    String temp = "t" + tempCount++;
    RESULT = new TACNode(null, num.toString() , null, temp);
    TACList.add(RESULT);
:};

termoAritmetico ::= PARESQ expressaoAritmetica:expr PARDIR
{:
    String temp = "t" + tempCount++;
    RESULT = new TACNode(null, expr.result, null, temp);
    TACList.add(RESULT);
:};

termoBooleano ::= CONSTANTE:constante
{:
    String temp = "t" + tempCount++;
    RESULT = new TACNode(null, constante.toString() , null, temp);
    TACList.add(RESULT);
:};

termoBooleano ::= PARESQ expressaoBooleana:expr PARDIR
{:
    String temp = "t" + tempCount++;
    RESULT = new TACNode(null, expr.result, null, temp);
    TACList.add(RESULT);
:};