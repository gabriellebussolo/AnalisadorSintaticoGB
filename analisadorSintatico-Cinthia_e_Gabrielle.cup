import java_cup.runtime.*;
import java.util.*;
import java.io.*;

parser code {:
    public boolean syntaxErrors;

    public void syntax_error(Symbol current_token) {
        report_error(
            "Syntax error at line " + (current_token.left+1) + ", column "
            + current_token.right, null
        );
    }
:};

// Declara as variaveis terminais

terminal CLASSE;                                // Classe
terminal BOOL, INT, VOID;                           // Tipos
terminal IF, ELSE;                                      // Operadores condicionais
terminal CONSTANTE, ID, NUMERO;                                             // Constante, identificador e numero
terminal RETORNO;                                                           // Retorno
terminal NOT, AND, OR;                                            // Operadores logicos
terminal SOMA, MULTIPLICACAO;                                       // Operadores aritmeticos
terminal OPIGUAL, OPMAIOR, OPMENOR;                                     // Operadores relacionais
terminal IGUAL, PARESQ, PARDIR, CHAVEESQ, CHAVEDIR, PONTOEVIRGULA, VIRGULA; // Pontuacao

// Declara as variaveis nao terminais
non terminal declaracaoClasse, declaracaoAtributo, declaracaoMetodo, metodos, atributos;
non terminal argumentos, tipoAtributo, tipoMetodo, comandos, comando, ifSemElse;
non terminal termoAritmetico, termoBooleano, expressaoAritmetica, expressaoBooleana, termo;
non terminal operadorLogico, operadorAritmetico, operadorRelacional;

// Define a precendencia
precedence left OR, AND, NOT;
precedence nonassoc OPIGUAL, OPMAIOR, OPMENOR;
precedence left SOMA, MULTIPLICACAO;
precedence left BOOL, INT;
precedence left ELSE, IF, ID, RETORNO;

//Define a gramatica

declaracaoClasse ::= CHAVEESQ CLASSE ID atributos metodos CHAVEDIR;

atributos ::= declaracaoAtributo atributos | declaracaoAtributo;

declaracaoAtributo ::= tipoAtributo ID PONTOEVIRGULA;

argumentos ::= tipoAtributo ID VIRGULA argumentos
             | tipoAtributo ID;

tipoAtributo ::= BOOL | INT;
tipoMetodo ::= BOOL | INT | VOID;

metodos ::= declaracaoMetodo metodos
      | declaracaoMetodo;

declaracaoMetodo ::= tipoMetodo ID PARESQ argumentos PARDIR CHAVEESQ comandos CHAVEDIR;

comandos ::= comandos comando
           | comando;

ifSemElse ::= IF PARESQ termo PARDIR comandos | ifSemElse ELSE comandos;

comando ::= ID IGUAL termo PONTOEVIRGULA
          | RETORNO termo PONTOEVIRGULA
          | ifSemElse;

operadorLogico ::= NOT | AND | OR;
operadorAritmetico ::= SOMA | MULTIPLICACAO;
operadorRelacional ::= OPIGUAL | OPMAIOR | OPMENOR;

termo ::= ID | expressaoAritmetica | expressaoBooleana;

expressaoAritmetica ::= termoAritmetico
                     | termo operadorAritmetico termo;

expressaoBooleana ::= termoBooleano
                   | termo operadorRelacional termo
                   | termo operadorLogico termo;

termoAritmetico ::= NUMERO
                  | PARESQ expressaoAritmetica PARDIR;

termoBooleano ::= CONSTANTE
                | PARESQ expressaoBooleana PARDIR;
