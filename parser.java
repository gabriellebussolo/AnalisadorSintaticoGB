
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\010\000\002\002\004\000\002\006" +
    "\004\000\002\006\003\000\002\003\005\000\002\007\006" +
    "\000\002\007\004\000\002\010\003\000\002\010\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\005\004\000\002\005\003\000\002\004\012\000\002\012" +
    "\004\000\002\012\003\000\002\014\007\000\002\014\005" +
    "\000\002\013\003\000\002\013\005\000\002\013\010\000" +
    "\002\013\003\000\002\017\006\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\015\003\000\002\015" +
    "\005\000\002\015\005\000\002\016\003\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\004\000" +
    "\002\016\005\000\002\016\005\000\002\020\003\000\002" +
    "\020\005\000\002\021\003\000\002\021\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\004\031\004\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\013\010\001\002\000\006\005\012\006\015\001" +
    "\002\000\010\005\023\006\026\007\024\001\002\000\004" +
    "\013\ufffa\001\002\000\010\005\012\006\015\007\ufffe\001" +
    "\002\000\004\013\016\001\002\000\004\013\ufff9\001\002" +
    "\000\004\033\017\001\002\000\010\005\ufffd\006\ufffd\007" +
    "\ufffd\001\002\000\010\005\uffff\006\uffff\007\uffff\001\002" +
    "\000\004\032\130\001\002\000\012\005\023\006\026\007" +
    "\024\032\ufff4\001\002\000\004\013\ufff8\001\002\000\004" +
    "\013\ufff6\001\002\000\004\013\027\001\002\000\004\013" +
    "\ufff7\001\002\000\004\027\030\001\002\000\006\005\012" +
    "\006\015\001\002\000\004\030\036\001\002\000\004\013" +
    "\033\001\002\000\006\030\ufffb\034\034\001\002\000\006" +
    "\005\012\006\015\001\002\000\004\030\ufffc\001\002\000" +
    "\004\031\037\001\002\000\012\010\047\013\040\015\041" +
    "\035\046\001\002\000\004\026\124\001\002\000\014\012" +
    "\051\013\060\014\056\016\062\027\052\001\002\000\020" +
    "\010\uffee\011\uffee\013\uffee\015\uffee\032\uffee\033\uffee\035" +
    "\uffee\001\002\000\020\010\uffeb\011\120\013\uffeb\015\uffeb" +
    "\032\uffeb\033\uffeb\035\uffeb\001\002\000\014\010\047\013" +
    "\040\015\041\032\117\035\046\001\002\000\020\010\ufff1" +
    "\011\ufff1\013\ufff1\015\ufff1\032\ufff1\033\ufff1\035\ufff1\001" +
    "\002\000\004\027\112\001\002\000\004\027\050\001\002" +
    "\000\014\012\051\013\060\014\056\016\062\027\052\001" +
    "\002\000\024\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\030\uffda\033\uffda\001\002\000\014\012" +
    "\051\013\060\014\056\016\062\027\052\001\002\000\024" +
    "\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\030\uffe6\033\uffe6\001\002\000\024\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\030\uffe7\033" +
    "\uffe7\001\002\000\024\017\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\030\uffe3\033\uffe3\001\002\000" +
    "\024\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\030\uffdc\033\uffdc\001\002\000\022\017\064\020" +
    "\071\021\066\022\072\023\065\024\067\025\070\030\102" +
    "\001\002\000\024\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\030\uffe9\033\uffe9\001\002\000\024" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025" +
    "\uffe8\030\uffe8\033\uffe8\001\002\000\014\012\051\013\060" +
    "\014\056\016\062\027\052\001\002\000\024\017\uffdf\020" +
    "\uffdf\021\066\022\072\023\065\024\067\025\070\030\uffdf" +
    "\033\uffdf\001\002\000\014\012\051\013\060\014\056\016" +
    "\062\027\052\001\002\000\014\012\051\013\060\014\056" +
    "\016\062\027\052\001\002\000\014\012\051\013\060\014" +
    "\056\016\062\027\052\001\002\000\014\012\051\013\060" +
    "\014\056\016\062\027\052\001\002\000\014\012\051\013" +
    "\060\014\056\016\062\027\052\001\002\000\014\012\051" +
    "\013\060\014\056\016\062\027\052\001\002\000\014\012" +
    "\051\013\060\014\056\016\062\027\052\001\002\000\024" +
    "\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\030\uffe4\033\uffe4\001\002\000\024\017\uffdd\020\uffdd" +
    "\021\066\022\072\023\065\024\067\025\070\030\uffdd\033" +
    "\uffdd\001\002\000\016\017\uffe1\020\uffe1\021\066\022\072" +
    "\030\uffe1\033\uffe1\001\002\000\016\017\uffe2\020\uffe2\021" +
    "\066\022\072\030\uffe2\033\uffe2\001\002\000\024\017\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\030" +
    "\uffe5\033\uffe5\001\002\000\016\017\uffe0\020\uffe0\021\066" +
    "\022\072\030\uffe0\033\uffe0\001\002\000\024\017\uffde\020" +
    "\uffde\021\066\022\072\023\065\024\067\025\070\030\uffde" +
    "\033\uffde\001\002\000\012\010\047\013\040\015\041\035" +
    "\046\001\002\000\020\010\047\011\ufff0\013\040\015\041" +
    "\032\ufff0\033\ufff0\035\046\001\002\000\020\010\ufff2\011" +
    "\ufff2\013\ufff2\015\ufff2\032\ufff2\033\ufff2\035\ufff2\001\002" +
    "\000\022\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024" +
    "\uffe7\025\uffe7\030\111\001\002\000\020\017\064\020\071" +
    "\021\066\022\072\023\065\024\067\025\070\001\002\000" +
    "\022\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8" +
    "\025\uffe8\030\110\001\002\000\024\017\uffdb\020\uffdb\021" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\030\uffdb\033\uffdb" +
    "\001\002\000\024\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\024\uffd9\025\uffd9\030\uffd9\033\uffd9\001\002\000\014" +
    "\012\051\013\060\014\056\016\062\027\052\001\002\000" +
    "\022\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\025\uffe7\030\114\001\002\000\012\010\047\013\040\015" +
    "\041\035\046\001\002\000\014\010\047\013\040\015\041" +
    "\033\116\035\046\001\002\000\020\010\uffec\011\uffec\013" +
    "\uffec\015\uffec\032\uffec\033\uffec\035\uffec\001\002\000\012" +
    "\005\ufff3\006\ufff3\007\ufff3\032\ufff3\001\002\000\012\010" +
    "\047\013\040\015\041\035\046\001\002\000\020\010\uffef" +
    "\011\uffef\013\uffef\015\uffef\032\uffef\033\uffef\035\uffef\001" +
    "\002\000\022\017\064\020\071\021\066\022\072\023\065" +
    "\024\067\025\070\033\123\001\002\000\020\010\uffed\011" +
    "\uffed\013\uffed\015\uffed\032\uffed\033\uffed\035\uffed\001\002" +
    "\000\014\012\051\013\060\014\056\016\062\027\052\001" +
    "\002\000\022\017\064\020\071\021\066\022\072\023\065" +
    "\024\067\025\070\033\126\001\002\000\020\010\uffea\011" +
    "\uffea\013\uffea\015\uffea\032\uffea\033\uffea\035\uffea\001\002" +
    "\000\004\032\ufff5\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\012\006\010\010\013\001\001\000\010\004\021\005" +
    "\020\011\024\001\001\000\002\001\001\000\010\003\012" +
    "\006\017\010\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\021\005\126\011\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\030\010" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\034\010\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\043\013\044\014\042" +
    "\017\041\001\001\000\002\001\001\000\014\015\060\016" +
    "\053\020\052\021\054\022\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\103\014\042\017\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\015\060\016\053\020\052\021\054\022\056\001" +
    "\001\000\002\001\001\000\014\015\106\016\104\020\052" +
    "\021\054\022\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\015\060\016" +
    "\053\020\052\021\054\022\062\001\001\000\002\001\001" +
    "\000\014\015\060\016\053\020\052\021\054\022\100\001" +
    "\001\000\014\015\060\016\053\020\052\021\054\022\077" +
    "\001\001\000\014\015\060\016\053\020\052\021\054\022" +
    "\076\001\001\000\014\015\060\016\053\020\052\021\054" +
    "\022\075\001\001\000\014\015\060\016\053\020\052\021" +
    "\054\022\074\001\001\000\014\015\060\016\053\020\052" +
    "\021\054\022\073\001\001\000\014\015\060\016\053\020" +
    "\052\021\054\022\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\102" +
    "\013\044\014\042\017\041\001\001\000\010\013\103\014" +
    "\042\017\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\015\060\016\112\020\052\021\054" +
    "\022\105\001\001\000\002\001\001\000\012\012\114\013" +
    "\044\014\042\017\041\001\001\000\010\013\103\014\042" +
    "\017\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\120\013\044\014\042\017\041\001\001\000\010" +
    "\013\103\014\042\017\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\015\060\016\053\020\052\021\054" +
    "\022\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public boolean syntaxErrors;

    public void syntax_error(Symbol current_token) {
        report_error(
            "Syntax error at line " + (current_token.left+1) + ", column "
            + current_token.right, null
        );
    }
    
    // Variável global para o contador de temporários
    private int tempCount = 0;

    // Método para incrementar e gerar um novo temporário
    private String newTemp() {
        return "t" + (tempCount++);
    }

    List<TACNode> TACList = new ArrayList<>(); // Lista para armazenar TACs


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // declaracaoClasse ::= CHAVEESQ CLASSE ID atributos metodos CHAVEDIR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracaoClasse",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= declaracaoClasse EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // atributos ::= declaracaoAtributo atributos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // atributos ::= declaracaoAtributo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracaoAtributo ::= tipoAtributo ID PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracaoAtributo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // argumentos ::= tipoAtributo ID VIRGULA argumentos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // argumentos ::= tipoAtributo ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipoAtributo ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoAtributo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipoAtributo ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoAtributo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipoMetodo ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoMetodo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipoMetodo ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoMetodo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipoMetodo ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoMetodo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // metodos ::= declaracaoMetodo metodos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // metodos ::= declaracaoMetodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracaoMetodo ::= tipoMetodo ID PARESQ argumentos PARDIR CHAVEESQ comandos CHAVEDIR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracaoMetodo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // comandos ::= comandos comando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // comandos ::= comando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ifSemElse ::= IF PARESQ termo PARDIR comandos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifSemElse",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ifSemElse ::= ifSemElse ELSE comandos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifSemElse",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // comando ::= comandoAritmetico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // comando ::= RETORNO termo PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // comando ::= WHILE PARESQ expressaoBooleana PARDIR comandos PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comando ::= ifSemElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comandoAritmetico ::= ID IGUAL termo PONTOEVIRGULA 
            {
              TACNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int termoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int termoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TACNode termo = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    String temp = "t" + tempCount++;

    RESULT = new TACNode(null, id.toString(), termo.result, temp);
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandoAritmetico",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // termo ::= ID 
            {
              TACNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = "t" + tempCount++;
    RESULT = new TACNode(null, id.toString() , null, temp);
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // termo ::= expressaoAritmetica 
            {
              TACNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode expr = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = "t" + tempCount++;
    RESULT = new TACNode(null, expr.result, null, temp);
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // termo ::= expressaoBooleana 
            {
              TACNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode expr = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = "t" + tempCount++;
    RESULT = new TACNode(null, expr.result, null, temp);
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expressaoAritmetica ::= termoAritmetico 
            {
              TACNode RESULT =null;
		int termoAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termoAright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode termoA = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = "t" + tempCount++;
    RESULT = new TACNode(null, termoA.result, null, temp);
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoAritmetica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expressaoAritmetica ::= termo SOMA termo 
            {
              TACNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TACNode t1 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode t2 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = "t" + tempCount++;

    RESULT = new TACNode("+", t1.result, t2.result, temp);
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoAritmetica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expressaoAritmetica ::= termo MULTIPLICACAO termo 
            {
              TACNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TACNode t1 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode t2 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = "t" + tempCount++;

    RESULT = new TACNode("+", t1.result, t2.result, temp);
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoAritmetica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expressaoBooleana ::= termoBooleano 
            {
              TACNode RESULT =null;
		int termoBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termoBright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode termoB = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = "t" + tempCount++;
    RESULT = new TACNode(null, termoB.result, null, temp);
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoBooleana",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expressaoBooleana ::= termo OPMAIOR termo 
            {
              TACNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TACNode t1 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode t2 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = "t" + tempCount++;
    RESULT = new TACNode(">", t1.result, t2.result, temp);
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoBooleana",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expressaoBooleana ::= termo OPMENOR termo 
            {
              TACNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TACNode t1 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode t2 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = "t" + tempCount++;
    RESULT = new TACNode("<", t1.result, t2.result, temp);
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoBooleana",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expressaoBooleana ::= termo OPIGUAL termo 
            {
              TACNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TACNode t1 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode t2 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = "t" + tempCount++;
    RESULT = new TACNode("==", t1.result, t2.result, temp);
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoBooleana",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expressaoBooleana ::= NOT termo 
            {
              TACNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode t1 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = "t" + tempCount++;
    RESULT = new TACNode("NOT", t1.result, null, temp);
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoBooleana",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expressaoBooleana ::= termo AND termo 
            {
              TACNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TACNode t1 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode t2 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = "t" + tempCount++;
    RESULT = new TACNode("AND", t1.result, t2.result, temp);
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoBooleana",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expressaoBooleana ::= termo OR termo 
            {
              TACNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TACNode t1 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode t2 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = "t" + tempCount++;
    RESULT = new TACNode("OR", t1.result, t2.result, temp);
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoBooleana",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // termoAritmetico ::= NUMERO 
            {
              TACNode RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = "t" + tempCount++;
    RESULT = new TACNode(null, num.toString() , null, temp);
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termoAritmetico",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // termoAritmetico ::= PARESQ expressaoAritmetica PARDIR 
            {
              TACNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TACNode expr = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    String temp = "t" + tempCount++;
    RESULT = new TACNode(null, expr.result, null, temp);
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termoAritmetico",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // termoBooleano ::= CONSTANTE 
            {
              TACNode RESULT =null;
		int constanteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constanteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object constante = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = "t" + tempCount++;
    RESULT = new TACNode(null, constante.toString() , null, temp);
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termoBooleano",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // termoBooleano ::= PARESQ expressaoBooleana PARDIR 
            {
              TACNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TACNode expr = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    String temp = "t" + tempCount++;
    RESULT = new TACNode(null, expr.result, null, temp);
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termoBooleano",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
