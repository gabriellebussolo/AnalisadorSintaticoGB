
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\010\000\002\002\004\000\002\006" +
    "\004\000\002\006\003\000\002\003\005\000\002\003\005" +
    "\000\002\007\006\000\002\007\006\000\002\007\004\000" +
    "\002\007\004\000\002\010\003\000\002\010\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\005" +
    "\004\000\002\005\003\000\002\004\012\000\002\012\004" +
    "\000\002\012\003\000\002\014\007\000\002\014\005\000" +
    "\002\013\003\000\002\013\005\000\002\013\010\000\002" +
    "\013\003\000\002\017\006\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\015\003\000\002\015\005" +
    "\000\002\015\005\000\002\016\003\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\004\000\002" +
    "\016\005\000\002\016\005\000\002\020\003\000\002\020" +
    "\005\000\002\021\003\000\002\021\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\004\031\004\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\013\010\001\002\000\006\005\012\006\014\001" +
    "\002\000\010\005\024\006\027\007\025\001\002\000\004" +
    "\013\020\001\002\000\010\005\012\006\014\007\ufffe\001" +
    "\002\000\004\013\015\001\002\000\004\033\016\001\002" +
    "\000\010\005\ufffc\006\ufffc\007\ufffc\001\002\000\010\005" +
    "\uffff\006\uffff\007\uffff\001\002\000\004\033\021\001\002" +
    "\000\010\005\ufffd\006\ufffd\007\ufffd\001\002\000\004\032" +
    "\135\001\002\000\012\005\024\006\027\007\025\032\ufff1" +
    "\001\002\000\004\013\ufff5\001\002\000\004\013\ufff3\001" +
    "\002\000\004\013\030\001\002\000\004\013\ufff4\001\002" +
    "\000\004\027\031\001\002\000\006\005\033\006\034\001" +
    "\002\000\004\030\043\001\002\000\004\013\040\001\002" +
    "\000\004\013\035\001\002\000\006\030\ufff8\034\036\001" +
    "\002\000\006\005\033\006\034\001\002\000\004\030\ufffa" +
    "\001\002\000\006\030\ufff9\034\041\001\002\000\006\005" +
    "\033\006\034\001\002\000\004\030\ufffb\001\002\000\004" +
    "\031\044\001\002\000\012\010\054\013\045\015\046\035" +
    "\053\001\002\000\004\026\131\001\002\000\014\012\056" +
    "\013\065\014\063\016\066\027\057\001\002\000\020\010" +
    "\uffeb\011\uffeb\013\uffeb\015\uffeb\032\uffeb\033\uffeb\035\uffeb" +
    "\001\002\000\020\010\uffe8\011\125\013\uffe8\015\uffe8\032" +
    "\uffe8\033\uffe8\035\uffe8\001\002\000\014\010\054\013\045" +
    "\015\046\032\124\035\053\001\002\000\020\010\uffee\011" +
    "\uffee\013\uffee\015\uffee\032\uffee\033\uffee\035\uffee\001\002" +
    "\000\004\027\117\001\002\000\004\027\055\001\002\000" +
    "\014\012\056\013\065\014\063\016\066\027\057\001\002" +
    "\000\024\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\025\uffd7\030\uffd7\033\uffd7\001\002\000\014\012\056" +
    "\013\065\014\063\016\066\027\057\001\002\000\024\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\030\uffe4\033\uffe4\001\002\000\024\017\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\030\uffe3\033\uffe3" +
    "\001\002\000\024\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\030\uffe0\033\uffe0\001\002\000\024" +
    "\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025" +
    "\uffd9\030\uffd9\033\uffd9\001\002\000\022\017\071\020\076" +
    "\021\073\022\077\023\072\024\074\025\075\030\107\001" +
    "\002\000\024\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\030\uffe6\033\uffe6\001\002\000\014\012" +
    "\056\013\065\014\063\016\066\027\057\001\002\000\024" +
    "\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025" +
    "\uffe5\030\uffe5\033\uffe5\001\002\000\024\017\uffdc\020\uffdc" +
    "\021\073\022\077\023\072\024\074\025\075\030\uffdc\033" +
    "\uffdc\001\002\000\014\012\056\013\065\014\063\016\066" +
    "\027\057\001\002\000\014\012\056\013\065\014\063\016" +
    "\066\027\057\001\002\000\014\012\056\013\065\014\063" +
    "\016\066\027\057\001\002\000\014\012\056\013\065\014" +
    "\063\016\066\027\057\001\002\000\014\012\056\013\065" +
    "\014\063\016\066\027\057\001\002\000\014\012\056\013" +
    "\065\014\063\016\066\027\057\001\002\000\014\012\056" +
    "\013\065\014\063\016\066\027\057\001\002\000\024\017" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\030\uffe1\033\uffe1\001\002\000\024\017\uffda\020\uffda\021" +
    "\073\022\077\023\072\024\074\025\075\030\uffda\033\uffda" +
    "\001\002\000\016\017\uffde\020\uffde\021\073\022\077\030" +
    "\uffde\033\uffde\001\002\000\016\017\uffdf\020\uffdf\021\073" +
    "\022\077\030\uffdf\033\uffdf\001\002\000\024\017\uffe2\020" +
    "\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\030\uffe2" +
    "\033\uffe2\001\002\000\016\017\uffdd\020\uffdd\021\073\022" +
    "\077\030\uffdd\033\uffdd\001\002\000\024\017\uffdb\020\uffdb" +
    "\021\073\022\077\023\072\024\074\025\075\030\uffdb\033" +
    "\uffdb\001\002\000\012\010\054\013\045\015\046\035\053" +
    "\001\002\000\020\010\054\011\uffed\013\045\015\046\032" +
    "\uffed\033\uffed\035\053\001\002\000\020\010\uffef\011\uffef" +
    "\013\uffef\015\uffef\032\uffef\033\uffef\035\uffef\001\002\000" +
    "\022\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4" +
    "\025\uffe4\030\116\001\002\000\020\017\071\020\076\021" +
    "\073\022\077\023\072\024\074\025\075\001\002\000\022" +
    "\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025" +
    "\uffe5\030\115\001\002\000\024\017\uffd8\020\uffd8\021\uffd8" +
    "\022\uffd8\023\uffd8\024\uffd8\025\uffd8\030\uffd8\033\uffd8\001" +
    "\002\000\024\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\030\uffd6\033\uffd6\001\002\000\014\012" +
    "\056\013\065\014\063\016\066\027\057\001\002\000\022" +
    "\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\030\121\001\002\000\012\010\054\013\045\015\046" +
    "\035\053\001\002\000\014\010\054\013\045\015\046\033" +
    "\123\035\053\001\002\000\020\010\uffe9\011\uffe9\013\uffe9" +
    "\015\uffe9\032\uffe9\033\uffe9\035\uffe9\001\002\000\012\005" +
    "\ufff0\006\ufff0\007\ufff0\032\ufff0\001\002\000\012\010\054" +
    "\013\045\015\046\035\053\001\002\000\020\010\uffec\011" +
    "\uffec\013\uffec\015\uffec\032\uffec\033\uffec\035\uffec\001\002" +
    "\000\022\017\071\020\076\021\073\022\077\023\072\024" +
    "\074\025\075\033\130\001\002\000\020\010\uffea\011\uffea" +
    "\013\uffea\015\uffea\032\uffea\033\uffea\035\uffea\001\002\000" +
    "\014\012\056\013\065\014\063\016\066\027\057\001\002" +
    "\000\022\017\071\020\076\021\073\022\077\023\072\024" +
    "\074\025\075\033\133\001\002\000\020\010\uffe7\011\uffe7" +
    "\013\uffe7\015\uffe7\032\uffe7\033\uffe7\035\uffe7\001\002\000" +
    "\004\032\ufff2\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\012\006\010\001\001\000\010\004\022\005\021\011" +
    "\025\001\001\000\002\001\001\000\006\003\012\006\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\022\005\133\011\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\050\013\051\014" +
    "\047\017\046\001\001\000\002\001\001\000\014\015\066" +
    "\016\057\020\060\021\061\022\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\110\014\047\017\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\015\066\016\057\020\060\021\061\022\063" +
    "\001\001\000\002\001\001\000\014\015\113\016\111\020" +
    "\060\021\061\022\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\015\066\016\057\020\060" +
    "\021\061\022\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\015\066\016\057\020\060\021\061\022\105" +
    "\001\001\000\014\015\066\016\057\020\060\021\061\022" +
    "\104\001\001\000\014\015\066\016\057\020\060\021\061" +
    "\022\103\001\001\000\014\015\066\016\057\020\060\021" +
    "\061\022\102\001\001\000\014\015\066\016\057\020\060" +
    "\021\061\022\101\001\001\000\014\015\066\016\057\020" +
    "\060\021\061\022\100\001\001\000\014\015\066\016\057" +
    "\020\060\021\061\022\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\107\013\051\014\047\017\046\001\001\000\010\013\110" +
    "\014\047\017\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\015\066\016\117\020\060\021" +
    "\061\022\112\001\001\000\002\001\001\000\012\012\121" +
    "\013\051\014\047\017\046\001\001\000\010\013\110\014" +
    "\047\017\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\125\013\051\014\047\017\046\001\001\000" +
    "\010\013\110\014\047\017\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\015\066\016\057\020\060\021" +
    "\061\022\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public boolean syntaxErrors;

    public void syntax_error(Symbol current_token) {
        report_error(
            "Syntax error at line " + (current_token.left+1) + ", column "
            + current_token.right, null
        );
    }
    
    // Variável para o contador de temporários
    private int tempCount = 0;

    // Variável para o contador de labels
    private int labelCount = 0;

    // Método para incrementar e gerar um novo temporário
    private String newTemp() {
        return "t" + (tempCount++);
    }

    // Método para incrementar e gerar um novo label
    private String newLabel() {
        return "L" + (labelCount++);
    }

    // Lista para armazenar TACs
    List<TACNode> TACList = new ArrayList<>(); 

    // Lista para armazenar a tabela de simbolos
    List<TabelaSimbolosNode> tabelaSimbolos = new ArrayList<>();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // declaracaoClasse ::= CHAVEESQ CLASSE ID atributos metodos CHAVEDIR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracaoClasse",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= declaracaoClasse EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // atributos ::= declaracaoAtributo atributos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // atributos ::= declaracaoAtributo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracaoAtributo ::= BOOL ID PONTOEVIRGULA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    TabelaSimbolosNode atributo = new TabelaSimbolosNode(tipo.toString(), id.toString());
    tabelaSimbolos.add(atributo);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracaoAtributo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracaoAtributo ::= INT ID PONTOEVIRGULA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    TabelaSimbolosNode atributo = new TabelaSimbolosNode(tipo.toString(), id.toString());
    tabelaSimbolos.add(atributo);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracaoAtributo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // argumentos ::= BOOL ID VIRGULA argumentos 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    TabelaSimbolosNode atributo = new TabelaSimbolosNode(tipo.toString(), id.toString());
    tabelaSimbolos.add(atributo);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // argumentos ::= INT ID VIRGULA argumentos 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    TabelaSimbolosNode atributo = new TabelaSimbolosNode(tipo.toString(), id.toString());
    tabelaSimbolos.add(atributo);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // argumentos ::= BOOL ID 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    TabelaSimbolosNode atributo = new TabelaSimbolosNode(tipo.toString(), id.toString());
    tabelaSimbolos.add(atributo);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // argumentos ::= INT ID 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    TabelaSimbolosNode atributo = new TabelaSimbolosNode(tipo.toString(), id.toString());
    tabelaSimbolos.add(atributo);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipoAtributo ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoAtributo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipoAtributo ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoAtributo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipoMetodo ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoMetodo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipoMetodo ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoMetodo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipoMetodo ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoMetodo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // metodos ::= declaracaoMetodo metodos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // metodos ::= declaracaoMetodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracaoMetodo ::= tipoMetodo ID PARESQ argumentos PARDIR CHAVEESQ comandos CHAVEDIR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracaoMetodo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // comandos ::= comandos comando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // comandos ::= comando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ifSemElse ::= IF PARESQ termo PARDIR comandos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifSemElse",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ifSemElse ::= ifSemElse ELSE comandos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifSemElse",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comando ::= comandoAritmetico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comando ::= RETORNO termo PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comando ::= WHILE PARESQ expressaoBooleana PARDIR comandos PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comando ::= ifSemElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comandoAritmetico ::= ID IGUAL termo PONTOEVIRGULA 
            {
              TACNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int termoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int termoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TACNode termo = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandoAritmetico",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // termo ::= ID 
            {
              TACNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    int i = -1;
    for(TabelaSimbolosNode no: tabelaSimbolos){
        if(no.nome.equals(id.toString())){
            i = tabelaSimbolos.indexOf(no);
            break;
        }
    }
    
    RESULT = new TACNode("st[" + i +"]", null, "termo");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // termo ::= expressaoAritmetica 
            {
              TACNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode expr = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new TACNode(expr.place, expr.code, "expressaoAritmetica");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // termo ::= expressaoBooleana 
            {
              TACNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode expr = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new TACNode(expr.place, expr.code, "expressaoBooleana");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expressaoAritmetica ::= termoAritmetico 
            {
              TACNode RESULT =null;
		int termoAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termoAright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode termoA = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new TACNode(termoA.place, termoA.code, "expressaoAritmetica");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoAritmetica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expressaoAritmetica ::= termo SOMA termo 
            {
              TACNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TACNode t1 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode t2 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = newTemp();

    RESULT = new TACNode(temp, temp + " := " + t1.place + " + " + t2.place, "expressaoAritmetica");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoAritmetica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expressaoAritmetica ::= termo MULTIPLICACAO termo 
            {
              TACNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TACNode t1 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode t2 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = newTemp();

    RESULT = new TACNode(temp, temp + " := " + t1.place + " * " + t2.place, "expressaoAritmetica");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoAritmetica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expressaoBooleana ::= termoBooleano 
            {
              TACNode RESULT =null;
		int termoBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termoBright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode termoB = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new TACNode(termoB.place, termoB.code, "expressaoBooleana");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoBooleana",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expressaoBooleana ::= termo OPMAIOR termo 
            {
              TACNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TACNode t1 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode t2 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = newTemp();

    RESULT = new TACNode(temp, temp + " := " + t1.place + " > " + t2.place, "expressaoBooleana");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoBooleana",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expressaoBooleana ::= termo OPMENOR termo 
            {
              TACNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TACNode t1 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode t2 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = newTemp();

    RESULT = new TACNode(temp, temp + " := " + t1.place + " < " + t2.place, "expressaoBooleana");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoBooleana",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expressaoBooleana ::= termo OPIGUAL termo 
            {
              TACNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TACNode t1 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode t2 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = newTemp();

    RESULT = new TACNode(temp, temp + " := " + t1.place + " == " + t2.place, "expressaoBooleana");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoBooleana",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expressaoBooleana ::= NOT termo 
            {
              TACNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode t1 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = newTemp();

    RESULT = new TACNode(temp, "not " + t1.place, "expressaoBooleana");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoBooleana",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expressaoBooleana ::= termo AND termo 
            {
              TACNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TACNode t1 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode t2 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = newTemp();

    RESULT = new TACNode(temp, t1.place + " and " + t2.place, "expressaoBooleana");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoBooleana",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expressaoBooleana ::= termo OR termo 
            {
              TACNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TACNode t1 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode t2 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = newTemp();

    RESULT = new TACNode(temp, t1.place + " or " + t2.place, "expressaoBooleana");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoBooleana",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // termoAritmetico ::= NUMERO 
            {
              TACNode RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new TACNode(num.toString(), null, "termoAritmetico");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termoAritmetico",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // termoAritmetico ::= PARESQ expressaoAritmetica PARDIR 
            {
              TACNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TACNode expr = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new TACNode(expr.place, expr.code, "termoAritmetico");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termoAritmetico",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // termoBooleano ::= CONSTANTE 
            {
              TACNode RESULT =null;
		int constanteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constanteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object constante = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new TACNode(constante.toString(), null, "termoAritmetico");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termoBooleano",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // termoBooleano ::= PARESQ expressaoBooleana PARDIR 
            {
              TACNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TACNode expr = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new TACNode(expr.place, expr.code, "termoAritmetico");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termoBooleano",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
