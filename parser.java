
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\010\000\002\002\004\000\002\006" +
    "\004\000\002\006\003\000\002\003\005\000\002\003\005" +
    "\000\002\007\006\000\002\007\006\000\002\007\004\000" +
    "\002\007\004\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\005\004\000\002\005\003\000\002\004" +
    "\012\000\002\011\004\000\002\011\003\000\002\013\010" +
    "\000\002\013\006\000\002\012\003\000\002\012\005\000" +
    "\002\012\010\000\002\012\003\000\002\016\006\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\014" +
    "\003\000\002\014\005\000\002\014\005\000\002\015\003" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\004\000\002\015\005\000\002\015\005\000\002" +
    "\017\003\000\002\017\005\000\002\020\003\000\002\020" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\004\031\004\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\013\010\001\002\000\006\005\012\006\014\001" +
    "\002\000\010\005\024\006\026\007\025\001\002\000\004" +
    "\013\020\001\002\000\010\005\012\006\014\007\ufffe\001" +
    "\002\000\004\013\015\001\002\000\004\033\016\001\002" +
    "\000\010\005\ufffc\006\ufffc\007\ufffc\001\002\000\010\005" +
    "\uffff\006\uffff\007\uffff\001\002\000\004\033\021\001\002" +
    "\000\010\005\ufffd\006\ufffd\007\ufffd\001\002\000\004\032" +
    "\137\001\002\000\012\005\024\006\026\007\025\032\ufff3" +
    "\001\002\000\004\013\ufff7\001\002\000\004\013\ufff5\001" +
    "\002\000\004\013\ufff6\001\002\000\004\013\030\001\002" +
    "\000\004\027\031\001\002\000\006\005\033\006\034\001" +
    "\002\000\004\030\043\001\002\000\004\013\040\001\002" +
    "\000\004\013\035\001\002\000\006\030\ufff8\034\036\001" +
    "\002\000\006\005\033\006\034\001\002\000\004\030\ufffa" +
    "\001\002\000\006\030\ufff9\034\041\001\002\000\006\005" +
    "\033\006\034\001\002\000\004\030\ufffb\001\002\000\004" +
    "\031\044\001\002\000\012\010\054\013\045\015\046\035" +
    "\053\001\002\000\004\026\133\001\002\000\014\012\056" +
    "\013\065\014\063\016\067\027\057\001\002\000\016\010" +
    "\uffed\013\uffed\015\uffed\032\uffed\033\uffed\035\uffed\001\002" +
    "\000\020\010\uffea\011\126\013\uffea\015\uffea\032\uffea\033" +
    "\uffea\035\uffea\001\002\000\014\010\054\013\045\015\046" +
    "\032\125\035\053\001\002\000\016\010\ufff0\013\ufff0\015" +
    "\ufff0\032\ufff0\033\ufff0\035\ufff0\001\002\000\004\027\120" +
    "\001\002\000\004\027\055\001\002\000\014\012\056\013" +
    "\065\014\063\016\067\027\057\001\002\000\024\017\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\030" +
    "\uffd9\033\uffd9\001\002\000\014\012\056\013\065\014\063" +
    "\016\067\027\057\001\002\000\024\017\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\030\uffe6\033\uffe6" +
    "\001\002\000\024\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\030\uffe5\033\uffe5\001\002\000\024" +
    "\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025" +
    "\uffe2\030\uffe2\033\uffe2\001\002\000\024\017\uffdb\020\uffdb" +
    "\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\030\uffdb\033" +
    "\uffdb\001\002\000\022\017\071\020\076\021\073\022\077" +
    "\023\072\024\074\025\075\030\107\001\002\000\024\017" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\030\uffe8\033\uffe8\001\002\000\024\017\uffe7\020\uffe7\021" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\030\uffe7\033\uffe7" +
    "\001\002\000\014\012\056\013\065\014\063\016\067\027" +
    "\057\001\002\000\024\017\uffde\020\uffde\021\073\022\077" +
    "\023\072\024\074\025\075\030\uffde\033\uffde\001\002\000" +
    "\014\012\056\013\065\014\063\016\067\027\057\001\002" +
    "\000\014\012\056\013\065\014\063\016\067\027\057\001" +
    "\002\000\014\012\056\013\065\014\063\016\067\027\057" +
    "\001\002\000\014\012\056\013\065\014\063\016\067\027" +
    "\057\001\002\000\014\012\056\013\065\014\063\016\067" +
    "\027\057\001\002\000\014\012\056\013\065\014\063\016" +
    "\067\027\057\001\002\000\014\012\056\013\065\014\063" +
    "\016\067\027\057\001\002\000\024\017\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\030\uffe3\033\uffe3" +
    "\001\002\000\024\017\uffdc\020\uffdc\021\073\022\077\023" +
    "\072\024\074\025\075\030\uffdc\033\uffdc\001\002\000\016" +
    "\017\uffe0\020\uffe0\021\073\022\077\030\uffe0\033\uffe0\001" +
    "\002\000\016\017\uffe1\020\uffe1\021\073\022\077\030\uffe1" +
    "\033\uffe1\001\002\000\024\017\uffe4\020\uffe4\021\uffe4\022" +
    "\uffe4\023\uffe4\024\uffe4\025\uffe4\030\uffe4\033\uffe4\001\002" +
    "\000\016\017\uffdf\020\uffdf\021\073\022\077\030\uffdf\033" +
    "\uffdf\001\002\000\024\017\uffdd\020\uffdd\021\073\022\077" +
    "\023\072\024\074\025\075\030\uffdd\033\uffdd\001\002\000" +
    "\012\010\054\013\045\015\046\035\053\001\002\000\014" +
    "\010\054\013\045\015\046\033\112\035\053\001\002\000" +
    "\016\010\ufff1\013\ufff1\015\ufff1\032\ufff1\033\ufff1\035\ufff1" +
    "\001\002\000\020\010\uffef\011\uffef\013\uffef\015\uffef\032" +
    "\uffef\033\uffef\035\uffef\001\002\000\022\017\uffe6\020\uffe6" +
    "\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\030\117\001" +
    "\002\000\020\017\071\020\076\021\073\022\077\023\072" +
    "\024\074\025\075\001\002\000\022\017\uffe7\020\uffe7\021" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\030\116\001\002" +
    "\000\024\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\030\uffda\033\uffda\001\002\000\024\017\uffd8" +
    "\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\030" +
    "\uffd8\033\uffd8\001\002\000\014\012\056\013\065\014\063" +
    "\016\067\027\057\001\002\000\022\017\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\030\122\001\002" +
    "\000\012\010\054\013\045\015\046\035\053\001\002\000" +
    "\014\010\054\013\045\015\046\033\124\035\053\001\002" +
    "\000\016\010\uffeb\013\uffeb\015\uffeb\032\uffeb\033\uffeb\035" +
    "\uffeb\001\002\000\012\005\ufff2\006\ufff2\007\ufff2\032\ufff2" +
    "\001\002\000\012\010\054\013\045\015\046\035\053\001" +
    "\002\000\014\010\054\013\045\015\046\033\130\035\053" +
    "\001\002\000\020\010\uffee\011\uffee\013\uffee\015\uffee\032" +
    "\uffee\033\uffee\035\uffee\001\002\000\022\017\071\020\076" +
    "\021\073\022\077\023\072\024\074\025\075\033\132\001" +
    "\002\000\016\010\uffec\013\uffec\015\uffec\032\uffec\033\uffec" +
    "\035\uffec\001\002\000\014\012\056\013\065\014\063\016" +
    "\067\027\057\001\002\000\022\017\071\020\076\021\073" +
    "\022\077\023\072\024\074\025\075\033\135\001\002\000" +
    "\016\010\uffe9\013\uffe9\015\uffe9\032\uffe9\033\uffe9\035\uffe9" +
    "\001\002\000\004\032\ufff4\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\012\006\010\001\001\000\010\004\022\005\021\010" +
    "\026\001\001\000\002\001\001\000\006\003\012\006\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\022\005\135\010\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\050\012\051\013" +
    "\047\016\046\001\001\000\002\001\001\000\014\014\065" +
    "\015\057\017\060\020\061\021\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\110\013\047\016\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\065\015\057\017\060\020\061\021\063" +
    "\001\001\000\002\001\001\000\014\014\114\015\112\017" +
    "\060\020\061\021\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\014\065" +
    "\015\057\017\060\020\061\021\067\001\001\000\002\001" +
    "\001\000\014\014\065\015\057\017\060\020\061\021\105" +
    "\001\001\000\014\014\065\015\057\017\060\020\061\021" +
    "\104\001\001\000\014\014\065\015\057\017\060\020\061" +
    "\021\103\001\001\000\014\014\065\015\057\017\060\020" +
    "\061\021\102\001\001\000\014\014\065\015\057\017\060" +
    "\020\061\021\101\001\001\000\014\014\065\015\057\017" +
    "\060\020\061\021\100\001\001\000\014\014\065\015\057" +
    "\017\060\020\061\021\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\107\012\051\013\047\016\046\001\001\000\010\012\110" +
    "\013\047\016\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\014\065\015" +
    "\120\017\060\020\061\021\113\001\001\000\002\001\001" +
    "\000\012\011\122\012\051\013\047\016\046\001\001\000" +
    "\010\012\110\013\047\016\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\011\126\012\051\013\047\016" +
    "\046\001\001\000\010\012\110\013\047\016\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\014\065\015\057\017\060\020\061\021\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public boolean syntaxErrors;

    public void syntax_error(Symbol current_token) {
        report_error(
            "Syntax error at line " + (current_token.left+1) + ", column "
            + current_token.right, null
        );
    }
    
    // Variável para o contador de temporários
    private int tempCount = 0;

    // Variável para o contador de labels
    private int labelCount = 0;

    // Método para incrementar e gerar um novo temporário
    private String newTemp() {
        return "t" + (tempCount++);
    }

    // Método para incrementar e gerar um novo label
    private String newLabel() {
        return "L" + (labelCount++);
    }

    // Lista para armazenar TACs
    List<TACNode> TACList = new ArrayList<>(); 

    // Lista para armazenar a tabela de simbolos
    List<TabelaSimbolosNode> tabelaSimbolos = new ArrayList<>();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // declaracaoClasse ::= CHAVEESQ CLASSE ID atributos metodos CHAVEDIR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracaoClasse",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= declaracaoClasse EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // atributos ::= declaracaoAtributo atributos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // atributos ::= declaracaoAtributo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracaoAtributo ::= BOOL ID PONTOEVIRGULA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    TabelaSimbolosNode atributo = new TabelaSimbolosNode(tipo.toString(), id.toString());
    tabelaSimbolos.add(atributo);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracaoAtributo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracaoAtributo ::= INT ID PONTOEVIRGULA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    TabelaSimbolosNode atributo = new TabelaSimbolosNode(tipo.toString(), id.toString());
    tabelaSimbolos.add(atributo);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracaoAtributo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // argumentos ::= BOOL ID VIRGULA argumentos 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    TabelaSimbolosNode atributo = new TabelaSimbolosNode(tipo.toString(), id.toString());
    tabelaSimbolos.add(atributo);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // argumentos ::= INT ID VIRGULA argumentos 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    TabelaSimbolosNode atributo = new TabelaSimbolosNode(tipo.toString(), id.toString());
    tabelaSimbolos.add(atributo);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // argumentos ::= BOOL ID 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    TabelaSimbolosNode atributo = new TabelaSimbolosNode(tipo.toString(), id.toString());
    tabelaSimbolos.add(atributo);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // argumentos ::= INT ID 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    TabelaSimbolosNode atributo = new TabelaSimbolosNode(tipo.toString(), id.toString());
    tabelaSimbolos.add(atributo);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipoMetodo ::= BOOL 
            {
              TACNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoMetodo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipoMetodo ::= INT 
            {
              TACNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoMetodo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipoMetodo ::= VOID 
            {
              TACNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoMetodo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // metodos ::= declaracaoMetodo metodos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // metodos ::= declaracaoMetodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracaoMetodo ::= tipoMetodo ID PARESQ argumentos PARDIR CHAVEESQ comandos CHAVEDIR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracaoMetodo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // comandos ::= comandos comando 
            {
              TACNode RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode com = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new TACNode(com.place, com.code, "comandos1");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // comandos ::= comando 
            {
              TACNode RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode com = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new TACNode(com.place, com.code, "comandos");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ifSemElse ::= IF PARESQ termo PARDIR comandos PONTOEVIRGULA 
            {
              TACNode RESULT =null;
		int termoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int termoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TACNode termo = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TACNode body = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    String trueLabel = newLabel();   

    String code = "if"+termo.code+"goto("+trueLabel+")"+body.code;

    RESULT = new TACNode(null, code, "ifSemElse"); 

    TACList.add(RESULT);  

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifSemElse",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ifSemElse ::= ifSemElse ELSE comandos PONTOEVIRGULA 
            {
              TACNode RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TACNode body = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    String falseLabel = newLabel();  

    String code = falseLabel + ":"+body.code;

    RESULT = new TACNode(null, code, "ifSemElse"); 

    TACList.add(RESULT);  
    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifSemElse",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // comando ::= comandoAritmetico 
            {
              TACNode RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode com = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new TACNode(com.place, com.code, "comando");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // comando ::= RETORNO termo PONTOEVIRGULA 
            {
              TACNode RESULT =null;
		int termoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int termoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TACNode termo = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new TACNode(termo.place, termo.code, "comando");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comando ::= WHILE PARESQ expressaoBooleana PARDIR comandos PONTOEVIRGULA 
            {
              TACNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TACNode cond = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TACNode body = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    String trueLabel = newLabel();
    String falseLabel = newLabel();

    String code = "";
    
    if(cond.code == null)
        code = trueLabel + ": if not(" + cond.place + ") " + "goto(" + falseLabel + ") " + body.code + "goto(" + trueLabel + ")"+ falseLabel + ":";
    else
        code = trueLabel + ": if not(" + cond.code + ") " + "goto(" + falseLabel + ") " + body.code + "goto(" + trueLabel + ")"+ falseLabel + ":";

    RESULT = new TACNode(null, code , "comando");

    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comando ::= ifSemElse 
            {
              TACNode RESULT =null;
		int ifSemElseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifSemElseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode ifSemElse = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new TACNode(ifSemElse.place, ifSemElse.code, "comando");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comandoAritmetico ::= ID IGUAL termo PONTOEVIRGULA 
            {
              TACNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int termoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int termoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TACNode termo = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    int i = -1;
    for(TabelaSimbolosNode no: tabelaSimbolos){
        if(no.nome.equals(id.toString())){
            i = tabelaSimbolos.indexOf(no);
            break;
        }
    }
    
    RESULT = new TACNode(null, "st[" + i +"]" + " := " + termo.place, "termo");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandoAritmetico",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // termo ::= ID 
            {
              TACNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    int i = -1;
    for(TabelaSimbolosNode no: tabelaSimbolos){
        if(no.nome.equals(id.toString())){
            i = tabelaSimbolos.indexOf(no);
            break;
        }
    }
    
    RESULT = new TACNode("st[" + i +"]", null, "termo");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // termo ::= expressaoAritmetica 
            {
              TACNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode expr = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new TACNode(expr.place, expr.code, "expressaoAritmetica");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // termo ::= expressaoBooleana 
            {
              TACNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode expr = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new TACNode(expr.place, expr.code, "expressaoBooleana");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expressaoAritmetica ::= termoAritmetico 
            {
              TACNode RESULT =null;
		int termoAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termoAright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode termoA = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new TACNode(termoA.place, termoA.code, "expressaoAritmetica");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoAritmetica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expressaoAritmetica ::= termo SOMA termo 
            {
              TACNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TACNode t1 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode t2 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = newTemp();

    RESULT = new TACNode(temp, temp + " := " + t1.place + " + " + t2.place, "expressaoAritmetica");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoAritmetica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expressaoAritmetica ::= termo MULTIPLICACAO termo 
            {
              TACNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TACNode t1 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode t2 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = newTemp();

    RESULT = new TACNode(temp, temp + " := " + t1.place + " * " + t2.place, "expressaoAritmetica");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoAritmetica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expressaoBooleana ::= termoBooleano 
            {
              TACNode RESULT =null;
		int termoBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termoBright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode termoB = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new TACNode(termoB.place, termoB.code, "expressaoBooleana");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoBooleana",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expressaoBooleana ::= termo OPMAIOR termo 
            {
              TACNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TACNode t1 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode t2 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = newTemp();

    RESULT = new TACNode(temp, temp + " := " + t1.place + " > " + t2.place, "expressaoBooleana");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoBooleana",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expressaoBooleana ::= termo OPMENOR termo 
            {
              TACNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TACNode t1 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode t2 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = newTemp();

    RESULT = new TACNode(temp, temp + " := " + t1.place + " < " + t2.place, "expressaoBooleana");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoBooleana",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expressaoBooleana ::= termo OPIGUAL termo 
            {
              TACNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TACNode t1 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode t2 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = newTemp();

    RESULT = new TACNode(temp, temp + " := " + t1.place + " == " + t2.place, "expressaoBooleana");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoBooleana",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expressaoBooleana ::= NOT termo 
            {
              TACNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode t1 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = newTemp();

    RESULT = new TACNode(temp, "not " + t1.place, "expressaoBooleana");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoBooleana",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expressaoBooleana ::= termo AND termo 
            {
              TACNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TACNode t1 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode t2 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = newTemp();

    RESULT = new TACNode(temp, t1.place + " and " + t2.place, "expressaoBooleana");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoBooleana",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expressaoBooleana ::= termo OR termo 
            {
              TACNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TACNode t1 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TACNode t2 = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = newTemp();

    RESULT = new TACNode(temp, t1.place + " or " + t2.place, "expressaoBooleana");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoBooleana",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // termoAritmetico ::= NUMERO 
            {
              TACNode RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new TACNode(num.toString(), null, "termoAritmetico");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termoAritmetico",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // termoAritmetico ::= PARESQ expressaoAritmetica PARDIR 
            {
              TACNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TACNode expr = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new TACNode(expr.place, expr.code, "termoAritmetico");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termoAritmetico",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // termoBooleano ::= CONSTANTE 
            {
              TACNode RESULT =null;
		int constanteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constanteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object constante = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new TACNode(constante.toString(), null, "termoAritmetico");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termoBooleano",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // termoBooleano ::= PARESQ expressaoBooleana PARDIR 
            {
              TACNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TACNode expr = (TACNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new TACNode(expr.place, expr.code, "termoAritmetico");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termoBooleano",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
